---
- name: Setup Arch Linux system
  hosts: localhost
  vars:
    # Default applications if no selection is provided (will be overridden by selections)
    monitoring_apps: ["htop"]
    browsers: ["firefox"] 
    gaming_apps: ["steam"]
    terminal_apps: []
    code_editors: []
  tasks:

    - name: Ensure system is up to date
      pacman:
        update_cache: yes
        upgrade: yes
      become: yes

    - name: Load package configuration and set categories
      block:
        - include_vars: 
            file: "packages.yml"
            name: package_config
        - set_fact:
            package_categories: "{{ package_config.keys() | list }}"
    
    - name: Install selected applications for all categories
      block:
        # First try with pacman module for repo packages
        - name: Install repo packages
          pacman:
            name: "{{ item.1 }}"
            state: present
          become: yes
          loop: >
            {%- set result = [] -%}
            {%- for category in package_categories -%}
              {%- if vars[category + '_selected'] is defined -%}
                {%- for app in vars[category + '_selected'] -%}
                  {{- result.append([category, app]) or '' -}}
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
            {{ result }}
          when: 
            - item.1 is defined
            - not (item.1 is search("-bin$") or item.1 is search("-git$"))
          ignore_errors: yes
          register: pacman_result
        
        # Then handle AUR packages and conflicts with shell
        - name: Install AUR packages and handle conflicts
          shell: |
            # Check if package is already installed
            if pacman -Qi "{{ item.1 }}" >/dev/null 2>&1; then
              echo "ALREADY_INSTALLED: {{ item.1 }}"
              exit 0
            fi
            
            # Handle conflicts for -bin packages
            if [[ "{{ item.1 }}" == *"-bin" ]]; then
              BASE_NAME=$(echo "{{ item.1 }}" | sed 's/-bin$//')
              if pacman -Qi "$BASE_NAME" >/dev/null 2>&1; then
                echo "REMOVING_CONFLICT: $BASE_NAME"
                yay -Rns --noconfirm "$BASE_NAME" || true
              fi
            fi
            
            echo "INSTALLING: {{ item.1 }}"
            yay -S --noconfirm {{ item.1 }}
          register: install_result
          changed_when: "'ALREADY_INSTALLED' not in install_result.stdout"
          loop: >
            {%- set result = [] -%}
            {%- for category in package_categories -%}
              {%- if vars[category + '_selected'] is defined -%}
                {%- for app in vars[category + '_selected'] -%}
                  {{- result.append([category, app]) or '' -}}
                {%- endfor -%}
              {%- endif -%}
            {%- endfor -%}
            {{ result }}
          when: 
            - item.1 is defined
            - (item.1 is search("-bin$") or item.1 is search("-git$") or (pacman_result.results is defined and pacman_result.results[loop.index0] is defined and pacman_result.results[loop.index0].failed|default(false)))

    - name: Get packages to remove
      set_fact:
        packages_to_remove: >
          {%- set result = [] -%}
          {%- for category in package_categories -%}
            {%- set available_packages = package_config[category] -%}
            {%- set selected_packages = vars[category + '_selected'] | default([]) -%}
            {%- if available_packages is defined -%}
              {%- for pkg_info in available_packages -%}
                {%- if pkg_info.package_name is defined -%}
                  {%- set pkg_name = pkg_info.package_name -%}
                  {%- if pkg_name not in selected_packages -%}
                    {{- result.append([category, pkg_name]) or '' -}}
                  {%- endif -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {{ result }}

    - name: Remove deselected applications for all categories
      block:
        # Try to remove with pacman module first
        - name: Remove repo packages
          pacman:
            name: "{{ item.1 }}"
            state: absent
          become: yes
          loop: "{{ packages_to_remove }}"
          when: 
            - packages_to_remove | length > 0
            - not (item.1 is search("-bin$") or item.1 is search("-git$"))
          ignore_errors: yes
          register: pacman_remove_result
        
        # Fallback to yay for AUR packages or failed removals
        - name: Remove AUR packages
          shell: |
            if pacman -Qi "{{ item.1 }}" >/dev/null 2>&1; then
              echo "REMOVING: {{ item.1 }}"
              yay -Rns --noconfirm {{ item.1 }}
            else
              echo "NOT_INSTALLED: {{ item.1 }}"
            fi
          register: remove_result
          changed_when: "'REMOVING:' in remove_result.stdout"
          loop: "{{ packages_to_remove }}"
          when: 
            - packages_to_remove | length > 0
            - (item.1 is search("-bin$") or item.1 is search("-git$") or (pacman_remove_result.results is defined and pacman_remove_result.results[loop.index0] is defined and pacman_remove_result.results[loop.index0].failed|default(false)))

    - name: Save installed selections for next run
      shell: |
        # Determine the saved selections directory using the same logic as other scripts
        PERSONAL_DOTFILES_DIR="$(dirname "$DOTFILES_DIR")/personal_dotfiles"
        if [ -d "$PERSONAL_DOTFILES_DIR" ]; then
          SAVED_SELECTIONS_DIR="$PERSONAL_DOTFILES_DIR/saved_selections"
        else
          SAVED_SELECTIONS_DIR="saved_selections"
        fi
        mkdir -p "$SAVED_SELECTIONS_DIR"
        {% for category in package_categories %}
        echo "{{ vars[category + '_selected'] | default([]) | join(',') }}" > "$SAVED_SELECTIONS_DIR/{{ category }}"
        {% endfor %}
      changed_when: false

    - name: Auto-stow dotfiles configurations
      shell: bash scripts/auto_stow.sh --yes
      args:
        chdir: "{{ playbook_dir }}/.."
      changed_when: false