---
- name: Setup Arch Linux system
  hosts: localhost
  vars:
    # Default applications if no selection is provided (will be overridden by selections)
    monitoring_apps: ["htop"]
    browsers: ["firefox"] 
    gaming_apps: ["steam"]
    terminal_apps: []
    code_editors: []
  tasks:
      
    - name: Load package configuration
      include_vars: "packages.yml"

    - name: Get all package categories dynamically
      set_fact:
        package_categories: "{{ vars.keys() | select('match', '^(monitoring_apps|browsers|gaming_apps|terminal_apps|code_editors)$') | list }}"

    - name: Display all selected applications
      debug:
        msg: "Installing {{ item | replace('_', ' ') }}: {{ vars[item + '_selected'] | default([]) }}"
      loop: "{{ package_categories }}"
      when: vars[item + '_selected'] is defined and vars[item + '_selected'] | length > 0

    - name: Ensure system is up to date
      pacman:
        update_cache: yes
        upgrade: yes
      become: yes

    - name: Install selected applications for all categories
      shell: |
        if [[ "{{ item.1 }}" == *"-bin" ]]; then
          BASE_NAME=$(echo "{{ item.1 }}" | sed 's/-bin$//')
          if pacman -Qi "$BASE_NAME" >/dev/null 2>&1; then
            echo "Removing conflicting package: $BASE_NAME"
            yay -Rns --noconfirm "$BASE_NAME" || true
          fi
        fi
        yay -S --noconfirm {{ item.1 }}
      loop: >
        {%- set result = [] -%}
        {%- for category in package_categories -%}
          {%- if vars[category + '_selected'] is defined -%}
            {%- for app in vars[category + '_selected'] -%}
              {{- result.append([category, app]) or '' -}}
            {%- endfor -%}
          {%- endif -%}
        {%- endfor -%}
        {{ result }}
      when: item.1 is defined

    - name: Get packages to remove
      set_fact:
        packages_to_remove: >
          {%- set result = [] -%}
          {%- for category in package_categories -%}
            {%- set available_packages = vars[category] -%}
            {%- set selected_packages = vars[category + '_selected'] | default([]) -%}
            {%- if available_packages is defined -%}
              {%- for pkg_info in available_packages -%}
                {%- if pkg_info.package_name is defined -%}
                  {%- set pkg_name = pkg_info.package_name -%}
                  {%- if pkg_name not in selected_packages -%}
                    {{- result.append([category, pkg_name]) or '' -}}
                  {%- endif -%}
                {%- endif -%}
              {%- endfor -%}
            {%- endif -%}
          {%- endfor -%}
          {{ result }}

    - name: Display packages to remove
      debug:
        msg: "Removing {{ item.0 | replace('_', ' ') }}: {{ item.1 }}"
      loop: "{{ packages_to_remove }}"
      when: packages_to_remove | length > 0

    - name: Remove deselected applications for all categories
      shell: yay -Rns --noconfirm {{ item.1 }} || true
      loop: "{{ packages_to_remove }}"
      when: packages_to_remove | length > 0

    - name: Save installed selections for next run
      shell: |
        # Determine the saved selections directory using the same logic as other scripts
        PERSONAL_DOTFILES_DIR="$(dirname "$DOTFILES_DIR")/personal_dotfiles"
        if [ -d "$PERSONAL_DOTFILES_DIR" ]; then
          SAVED_SELECTIONS_DIR="$PERSONAL_DOTFILES_DIR/.saved_selections"
        else
          SAVED_SELECTIONS_DIR=".saved_selections"
        fi
        mkdir -p "$SAVED_SELECTIONS_DIR"
        {% for category in package_categories %}
        echo "{{ vars[category + '_selected'] | default([]) | join(',') }}" > "$SAVED_SELECTIONS_DIR/{{ category }}"
        {% endfor %}